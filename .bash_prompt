# vim:ft=sh
BLACK="\[\033[0;30m\]"
RED="\[\033[1;31m\]"
GREEN="\[\033[1;32m\]"
BROWN="\[\033[0;33m\]"
YELLOW="\[\033[1;33m\]"
BLUE="\[\033[1;34m\]"
MAGENTA="\[\033[1;35m\]"
CYAN="\[\033[1;36m\]"
WHITE="\[\033[0;37m\]"
RESET="\[\033[m\]"

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${s}";
	else
		return;
	fi;
}

# Set the nice PS1
PS1=""
if [[ ${EUID} == 0 ]]; then
  PS1=$PS1"$RED\u"
else
  PS1=$PS1"$BLUE\u"
fi
PS1=$PS1"$WHITE"" at "
PS1=$PS1"$MAGENTA\h"
PS1=$PS1"$WHITE in "
PS1=$PS1"$CYAN\w "
PS1=$PS1"\$(prompt_git \"${WHITE}on ${BROWN}\")"

# White: newline, prompt
if [[ ${EUID} == 0 ]]; then
  PS1=$PS1"$RED\n# $WHITE"
else
  PS1=$PS1"$WHITE\n$ "
fi

PS2="\[$BROWN\]continue → \[$RESET\]"
